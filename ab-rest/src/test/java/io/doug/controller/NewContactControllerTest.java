package io.doug.controller;import io.doug.entity.Contact;import io.doug.entity.User;import io.doug.service.ContactService;import org.json.JSONObject;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.http.MediaType;import org.springframework.security.test.context.support.WithMockUser;import org.springframework.test.context.junit4.SpringRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.util.Assert;import static org.mockito.BDDMockito.given;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;/** * Created by djeremias on 1/11/17. */@RunWith(SpringRunner.class)@WebMvcTest(value = ContactController.class)public class NewContactControllerTest {    private final static Logger LOG = LoggerFactory.getLogger(NewContactControllerTest.class);    @Autowired    private MockMvc mvc;    @MockBean    private ContactService contactService;    private User user;    private Contact contact;    private Contact retContact;    @Value("${doug.test}")    private String test;    @Before    public void setup() {        contact = new Contact("new", "contact", "new@contact.com", "412-555-1234");        contact.setId(999999L);        retContact = new Contact();        user = new User("admin@doug.com", "password");    }    @WithMockUser(username="admin@doug.com")    @Test    public void testGetById() throws Exception {       LOG.info("value of test: {}", test);       given(contactService.getById(999999L)).willReturn(contact);       String result =  mvc.perform(MockMvcRequestBuilders.get("/contact/999999"))               .andExpect(status().isOk())               .andReturn()               .getResponse().getContentAsString();        JSONObject json = new JSONObject(result).getJSONObject("payload");        Assert.isTrue(json != null, "payload is null");        Assert.isTrue(json.getString("firstName").equals("new"), "firstname did not match");    }    @WithMockUser(username="admin@doug.com")    @Test    public void testCreateContact() throws Exception {        given(contactService.create(contact, user)).willReturn(contact);        JSONObject contactJson = new JSONObject(contact);        String result =  mvc.perform(post("/contact")                .content(contactJson.toString())                .accept(MediaType.APPLICATION_JSON)                .contentType(MediaType.APPLICATION_JSON))                //.andExpect(content().json(contactJson.toString()))                .andExpect(status().isOk())                .andReturn()                .getResponse().getContentAsString();        Assert.isTrue(result != null, "result is null");        /*JSONObject contactJson = new JSONObject(contact);        String result =  mvc.perform(post("/contact")                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)                .content(contactJson.toString()))                .andExpect(status().isOk())                .andReturn()                .getResponse().getContentAsString();        JSONObject json = new JSONObject(result).getJSONObject("payload");        Assert.isTrue(json != null);*/    }    @WithMockUser(username="admin@doug.com")    @Test    public void testUpdateContact() throws Exception {        contact.setFirstName("update");        given(contactService.update(contact)).willReturn(contact);        JSONObject contactJson = new JSONObject(contact);        String result =  mvc.perform(MockMvcRequestBuilders.put("/contact")                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)                .content(contactJson.toString()))                .andExpect(status().isOk())                .andReturn()                .getResponse().getContentAsString();        String json = new JSONObject(result).getString("message");        Assert.isTrue(json != null, "json is null");        Assert.isTrue("Contact successfully updated.".equals(json), "contact not updated");    }}